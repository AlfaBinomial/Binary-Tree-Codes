#include<bits/stdc++.h>
#include<stack>
#include<algorithm>
#include<vector>
using namespace std;
struct node{
	int data;
	node *left;
	node *right;
};
void printSpiral_order(node *root);
node *insert(node *root,int data);
int main(){
	node *root = NULL;
	root = insert(root,15);
	root = insert(root,4);
	root = insert(root,6);
	root = insert(root,5);
	root = insert(root,17);
	root = insert(root,11);
	root = insert(root,8);
	printSpiral_order(root);
	return 0;
}
node *insert(node *root ,int data){
	if(root == NULL){
		node *temp = new node();
		temp->data = data;
		temp->left = NULL;
		temp->right = NULL;
		root = temp;
		return root;
	}
	else if(data<=root->data){
		root->left = insert(root->left,data);
	}
	else root->right = insert(root->right,data);
	return root;
}
void printSpiral_order(node *root){
	stack<node>s1;
	stack<node>s2;
	node *current = new node();
	current = root;
	s1.push(*root);
	*current = s1.top();
	while(!s1.empty() || !s2.empty()){
		if(!s1.empty()){
			while(!s1.empty()){
				*current = s1.top();
				cout << current->data << " ";
				if(current->left != NULL)s2.push(*current->left);
				if(current->right != NULL)s2.push(*current->right);
				s1.pop();
			}
		}
		if(!s2.empty()){
			while(!s2.empty()){
				*current = s2.top();
				cout << current->data << " ";
				if(current->right != NULL)s1.push(*current->right);
				if(current->left != NULL)s1.push(*current->left);
				s2.pop();
			}
		}
	}
}