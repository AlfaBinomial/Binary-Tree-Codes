#include<bits/stdc++.h>
#include<vector>
#include<algorithm>
#include<stack>
#include<queue>
#include<math.h>
using namespace std;
int min(int a,int b);
int powerOf_Two(int len);
int makingLength(int len);
void generate_Tree(int segment_Tree[],int newLen);
void construct_Tree(int input[],int segment_Tree[],int low,int high,int position);
int main(){
	int len,newLen;
	int position = 0;
	scanf("%d",&len);
	int input[len];
	for(int i = 0;i<len;i++){
		scanf("%d",&input[i]);
	}
	int x = powerOf_Two(len);
	if(x == 1)newLen = (2*len)-1;
	else if(x>1)newLen = makingLength(len);
	int segment_Tree[newLen];
	int low = 0,high = len;
	generate_Tree(segment_Tree,newLen);
	for(int i = 0;i<newLen;i++){
		printf("%d ",segment_Tree[i]);
	}
	construct_Tree(input,segment_Tree,low,high,position);
	printf(" The segment tree is : ");
	for(int i = 0;i<newLen;i++){
		printf("%d ",segment_Tree[i]);
	}	
	return 0;
}
int powerOf_Two(int len){
	while(len %2 ==0){
		len /=2;
	}
	return len;
}
int makingLength(int len){
	int xLen = 1;
	while(xLen <len){
		xLen *=2;
	}
	return (xLen*2)-1;
}
void generate_Tree(int segment_Tree[],int newLen){
	for(int i = 0;i< newLen;i++){
		segment_Tree[i] = INT_MAX;
	}
}
void construct_Tree(int input[],int segment_Tree[],int low,int high,int position){
	if(low == high){
		segment_Tree[position] = input[low];
		return;
	}
	int mid = (high+low)/2;
	construct_Tree(input,segment_Tree,low,mid,(2*position)+1);
	construct_Tree(input,segment_Tree,mid+1,high,(2*position)+2);
	segment_Tree[position] = min(segment_Tree[(2*position) + 1],segment_Tree[(2*position) + 2]);
}
int min(int a,int b){
	return((a<b)?a:b);
}